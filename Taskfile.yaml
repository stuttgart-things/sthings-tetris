version: "3"
vars:
  PROJECT_NAME:
    sh: echo ${PWD##*/}
  BRANCH:
    sh: if [ $(git rev-parse --abbrev-ref HEAD) != "main" ]; then echo $(git rev-parse --abbrev-ref HEAD); else echo main ; fi
  GIT_COMMIT:
    sh: git log -n 1 --format=%h
  DATE:
    sh: date -Ih
  VERSION:
    sh: |
      [ "$(git branch --show-current)" != "main" ] && echo "dev-$(git describe --tags --abbrev=0)" || echo $(git describe --tags --abbrev=0)
dotenv: ['.env', '{{.HOME}}/.env']

env:
  GOLANG_CROSS_VERSION: "v1.23"
  PACKAGE_NAME: "github.com/stuttgart-things/sthings-tetris"

tasks:
  goreleaser:
    desc: Release bins w/ goreleaser
    cmds:
      - rm -rf ./dist
      - goreleaser healthcheck
      - goreleaser check
      - goreleaser release --skip=publish --snapshot --clean
      - goreleaser release --clean
      - rm -rf ./dist

  release:
    desc: Push new version
    deps: [check, lint, test]
    cmds:
      - task: pr
      - npx semantic-release --dry-run
      - npx semantic-release --debug --no-ci
      - echo released version $(git describe --tags --abbrev=0)
      - task: goreleaser

  pr:
    desc: Create pull request into main
    cmds:
      - task: commit
      - gh pr create -t "{{ .BRANCH }}" -b "{{ .BRANCH }} branch into main"
      - sleep 10s
      #- gh pr checks $(gh pr list | grep "^[^#;]" | awk '{print $1}') --watch
      - gh pr merge $(gh pr list | grep "^[^#;]" | grep '{{ .BRANCH }}' | awk '{print $1}') --auto --rebase --delete-branch
      - git checkout main && git pull

  branch:
    desc: Create branch from main
    cmds:
      - git checkout main
      - git branch
      - git pull
      - |
        echo "Enter to be created (remote) branch:"
        read BRANCH_NAME;
        git checkout -b ${BRANCH_NAME}
        git push origin ${BRANCH_NAME}
      - git branch
      - git branch --set-upstream-to=origin/main ${BRANCH_NAME}

  commit:
    desc: Commit + push code into branch
    cmds:
      - rm -rf dist/
      - git branch --set-upstream-to=origin/{{ .BRANCH }}
      - git pull
      - |
        git add *
        if [[ -n $(git status --porcelain) ]]; then
          echo "committing changes"
          echo "ENTER COMMIT MESSAGE"
          COMMIT_MESSAGE=$(echo $(gum choose "feat: {{ .BRANCH }}" "fix: {{ .BRANCH }}" "BREAKING CHANGE: {{ .BRANCH }}" "ENTER CUSTOM COMMIT MESSAGE"))

          if [ "$COMMIT_MESSAGE" == "ENTER CUSTOM COMMIT MESSAGE" ]; then
            COMMIT_MESSAGE=$(echo $(gum input --placeholder "scope" --value "commit to {{ .BRANCH }}"))
          fi

          git commit --allow-empty -a -m "$(echo ${COMMIT_MESSAGE})"
        else
          echo "no changes"
        fi
        git push origin -u {{ .BRANCH }}

  default:
    cmds:
      - task: codegen
      - task: lint
      - task: test

  install:
    desc: Installs Tetrigo
    aliases: [i]
    sources:
      - "./**/*.go"
    cmds:
      - go install -v ./cmd/tetrigo

  mod:
    desc: Downloads and tidy Go modules
    cmds:
      - go mod download
      - go mod tidy

  codegen:
    desc: Generate code dependencies
    cmds:
      - mockery

  lint:
    desc: Runs golangci-lint
    aliases: [l]
    sources:
      - "./**/*.go"
      - .golangci.yaml
    cmds:
      - golangci-lint run

  lint:fix:
    desc: Runs golangci-lint and fixes any issues
    sources:
      - "./**/*.go"
      - .golangci.yaml
    cmds:
      - golangci-lint run --fix

  test:
    desc: Runs test suite
    aliases: [t]
    cmds:
      - go test -cover ./...

  build:
    desc: Build the binary
    cmds:
      - go build -v -o ./bin/ {{.CLI_ARGS}} ./...

  run:
    desc: Run the Go project
    cmds:
      - go run ./cmd/sthingsTetris/ {{.CLI_ARGS}}

  cover:
    desc: Run tests with coverage
    cmds:
      - go test -coverprofile=cover.out {{.CLI_ARGS}} ./...
      - go tool cover -html=cover.out

  goreleaser:install:
    desc: Installs goreleaser
    cmds:
      - go install github.com/goreleaser/goreleaser@latest

  goreleaser:dryrun:
    desc: Releases the project
    cmds:
      - bash ./scripts/goreleaser/dryrun.sh

  goreleaser:release:
    desc: Releases the project
    cmds:
      - bash ./scripts/goreleaser/release.sh
